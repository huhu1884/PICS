<?php

/**
 * @file
 * An open source application development framework for PHP 5.1.6 or newer
 *
 * @package    CodeIgniter
 * @author    ExpressionEngine Dev Team
 * @copyright  Copyright (c) 2008 - 2011, EllisLab, Inc.
 * @license    http://codeigniter.com/user_guide/license.html
 * @link    http://codeigniter.com
 * @since    Version 1.0
 * @filesource
 */

/**
 * Input Class
 *
 * Pre-processes global input data for security
 *
 * @package    CodeIgniter
 * @subpackage  Libraries
 * @category  Input
 * @author    ExpressionEngine Dev Team
 */
class Input {

  /**
   * user agent (web browser) being used by the current user
   *
   * @var string
   */
  var $user_agent = FALSE;

  /**
   * If FALSE, then $_GET will be set to an empty array
   *
   * @var bool
   */
  var $_allow_get_array = TRUE;

  /**
   * If TRUE, then newlines are standardized
   *
   * @var bool
   */
  var $_standardize_newlines = TRUE;

  /**
   * Determines whether the XSS filter is always active when GET, POST or COOKIE data is encountered
   * Set automatically based on config setting
   *
   * @var bool
   */
  var $_enable_xss = FALSE;

  /**
   * Constructor
   *
   * Sets whether to globally enable the XSS processing
   * and whether to allow the $_GET array
   *
   */
  public function __construct() {
    $this->security = new Security();

    // Do we need the UTF-8 class?
    $this->uni = new Utf8();

    // Sanitize global arrays
    $this->_sanitize_globals();
  }

  // --------------------------------------------------------------------

  /**
   * Fetch from array
   *
   * This is a helper function to retrieve values from global arrays
   *
   * @access  private
   *
   * @param  array
   * @param  string
   * @param  bool
   *
   * @return  string
   */
  function _fetch_from_array(&$array, $index = '', $xss_clean = TRUE) {
    if (!isset($array[$index])) {
      return FALSE;
    }

    if ($xss_clean === TRUE) {
      return $this->security->xss_clean($array[$index]);
    }

    return $array[$index];
  }

  // --------------------------------------------------------------------

  /**
   * Fetch an item from the GET array
   *
   * @access  public
   *
   * @param  string
   * @param  bool
   *
   * @return  string
   */
  function get($index = NULL, $xss_clean = TRUE) {
    // Check if a field has been provided
    if ($index === NULL AND !empty($_GET)) {
      $get = array();

      // loop through the full _GET array
      foreach (array_keys($_GET) as $key) {
        $get[$key] = $this->_fetch_from_array($_GET, $key, $xss_clean);
      }

      return $get;
    }

    return $this->_fetch_from_array($_GET, $index, $xss_clean);
  }

  // --------------------------------------------------------------------

  /**
   * Fetch an item from the POST array
   *
   * @access  public
   *
   * @param  string
   * @param  bool
   *
   * @return  string
   */
  function post($index = NULL, $xss_clean = TRUE) {
    // Check if a field has been provided
    if ($index === NULL AND !empty($_POST)) {
      $post = array();

      // Loop through the full _POST array and return it
      foreach (array_keys($_POST) as $key) {
        $post[$key] = $this->_fetch_from_array($_POST, $key, $xss_clean);
      }

      return $post;
    }

    return $this->_fetch_from_array($_POST, $index, $xss_clean);
  }

  // --------------------------------------------------------------------

  /**
   * Fetch an item from the COOKIE array
   *
   * @access  public
   *
   * @param  string
   * @param  bool
   *
   * @return  string
   */
  function cookie($index = '', $xss_clean = TRUE) {
    return $this->_fetch_from_array($_COOKIE, $index, $xss_clean);
  }

  // --------------------------------------------------------------------

  /**
   * Fetch an item from the SERVER array
   *
   * @access  public
   *
   * @param  string
   * @param  bool
   *
   * @return  string
   */
  function server($index = '', $xss_clean = TRUE) {
    return $this->_fetch_from_array($_SERVER, $index, $xss_clean);
  }

  // --------------------------------------------------------------------

  /**
   * User Agent
   *
   * @access  public
   * @return  string
   */
  function user_agent() {
    if ($this->user_agent !== FALSE) {
      return $this->user_agent;
    }

    $this->user_agent = (!isset($_SERVER['HTTP_USER_AGENT'])) ? FALSE : $_SERVER['HTTP_USER_AGENT'];

    return $this->user_agent;
  }

  // --------------------------------------------------------------------

  /**
   * Sanitize Globals
   *
   * This function does the following:
   *
   * Unsets $_GET data (if query strings are not enabled)
   *
   * Unsets all globals if register_globals is enabled
   *
   * Standardizes newline characters to \n
   *
   * @access  private
   * @return  void
   */
  function _sanitize_globals() {
    // It would be "wrong" to unset any of these GLOBALS.
    $protected = array('_SERVER', '_GET', '_POST', '_FILES', '_REQUEST',
      '_SESSION', '_ENV', 'GLOBALS', 'HTTP_RAW_POST_DATA',
      'system_folder', 'application_folder', 'BM', 'EXT',
      'CFG', 'URI', 'RTR', 'OUT', 'IN');

    // Unset globals for securiy.
    // This is effectively the same as register_globals = off
    foreach (array($_GET, $_POST, $_COOKIE) as $global) {
      if (!is_array($global)) {
        if (!in_array($global, $protected)) {
          global $$global;
          $$global = NULL;
        }
      }
      else {
        foreach ($global as $key => $val) {
          if (!in_array($key, $protected)) {
            global $$key;
            $$key = NULL;
          }
        }
      }
    }

    // Is $_GET data allowed? If not we'll set the $_GET to an empty array
    if ($this->_allow_get_array == FALSE) {
      $_GET = array();
    }
    else {
      if (is_array($_GET) AND count($_GET) > 0) {
        foreach ($_GET as $key => $val) {
          $_GET[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);
        }
      }
    }

    // Clean $_POST Data
    if (is_array($_POST) AND count($_POST) > 0) {
      foreach ($_POST as $key => $val) {
        $_POST[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);
      }
    }

    // Clean $_COOKIE Data
    if (is_array($_COOKIE) AND count($_COOKIE) > 0) {
      // Also get rid of specially treated cookies that might be set by a server
      // or silly application, that are of no use to a CI application anyway
      // but that when present will trip our 'Disallowed Key Characters' alarm
      // http://www.ietf.org/rfc/rfc2109.txt
      // note that the key names below are single quoted strings, and are not PHP variables
      unset($_COOKIE['$Version']);
      unset($_COOKIE['$Path']);
      unset($_COOKIE['$Domain']);

      foreach ($_COOKIE as $key => $val) {
        $_COOKIE[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);
      }
    }

    // Sanitize PHP_SELF
    $_SERVER['PHP_SELF'] = strip_tags($_SERVER['PHP_SELF']);
  }

  // --------------------------------------------------------------------

  /**
   * Clean Input Data
   *
   * This is a helper function. It escapes data and
   * standardizes newline characters to \n
   *
   * @access  private
   *
   * @param  string
   *
   * @return  string
   */
  function _clean_input_data($str) {
    if (is_array($str)) {
      $new_array = array();
      foreach ($str as $key => $val) {
        $new_array[$this->_clean_input_keys($key)] = $this->_clean_input_data($val);
      }

      return $new_array;
    }

    /* We strip slashes if magic quotes is on to keep things consistent

      NOTE: In PHP 5.4 get_magic_quotes_gpc() will always return 0 and
      it will probably not exist in future versions at all.
     */
    if (!version_compare(PHP_VERSION, '5.4') >= 0 && get_magic_quotes_gpc()) {
      $str = stripslashes($str);
    }

    // Clean UTF-8 if supported
    if (UTF8_ENABLED === TRUE) {
      $str = $this->uni->clean_string($str);
    }

    // Remove control characters
    $str = self::remove_invisible_characters($str);

    // Should we filter the input data?
    if ($this->_enable_xss === TRUE) {
      $str = $this->security->xss_clean($str);
    }

    // Standardize newlines if needed
    if ($this->_standardize_newlines == TRUE) {
      if (strpos($str, "\r") !== FALSE) {
        $str = str_replace(array("\r\n", "\r", "\r\n\n"), PHP_EOL, $str);
      }
    }

    return $str;
  }

  // --------------------------------------------------------------------

  /**
   * Clean Keys
   *
   * This is a helper function. To prevent malicious users
   * from trying to exploit keys we make sure that keys are
   * only named with alpha-numeric text and a few other items.
   *
   * @access  private
   *
   * @param  string
   *
   * @return  string
   */
  function _clean_input_keys($str) {
    //    if (!preg_match("/^[\[\]a-z0-9:_\/-]+$/i", $str)) {
    //      exit('Disallowed Key Characters.');
    //    }

    // Clean UTF-8 if supported
    if (UTF8_ENABLED === TRUE) {
      $str = $this->uni->clean_string($str);
    }

    return $str;
  }

  // --------------------------------------------------------------------

  /**
   * Is ajax Request?
   *
   * Test to see if a request contains the HTTP_X_REQUESTED_WITH header
   *
   * @return   boolean
   */
  public function is_ajax_request() {
    return ($this->server('HTTP_X_REQUESTED_WITH') === 'XMLHttpRequest');
  }

  // --------------------------------------------------------------------

  /**
   * Is cli Request?
   *
   * Test to see if a request was made from the command line
   *
   * @return   boolean
   */
  public function is_cli_request() {
    return (php_sapi_name() == 'cli') or defined('STDIN');
  }

  /**
   * Remove Invisible Characters
   *
   * This prevents sandwiching null characters
   * between ascii characters, like Java\0script.
   *
   * @access  public
   *
   * @param  string
   *
   * @return  string
   */
  public static function remove_invisible_characters($str, $url_encoded = TRUE) {
    $non_displayables = array();

    // every control character except newline (dec 10)
    // carriage return (dec 13), and horizontal tab (dec 09)

    if ($url_encoded) {
      $non_displayables[] = '/%0[0-8bcef]/'; // url encoded 00-08, 11, 12, 14, 15
      $non_displayables[] = '/%1[0-9a-f]/'; // url encoded 16-31
    }

    $non_displayables[] = '/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S'; // 00-08, 11, 12, 14-31, 127

    do {
      $str = preg_replace($non_displayables, '', $str, -1, $count);
    } while ($count);

    return $str;
  }

}
